# Rime schema settings
# encoding: utf-8

schema:
  schema_id: guhuwubi
  name: "孤狐五笔"
  version: "1.06d"
  author:
    - 发明人 王永民先生
  description: |
    孤狐新世纪五笔
    基于孤狐五笔 1.06d码表生成
    敲 z 键进入拼音反查
  dependencies:
    - luna_pinyin
    - emoji
    - symbols
    
switches:
  - name: ascii_mode
    reset: 0
    states: [ 中文, 西文 ]
  - name: full_shape
    states: [ 半角, 全角 ]
  - name: extended_charset
    states: [ 通用, 增廣 ]
  - name: ascii_punct
    states: ["。，", "．，"]
  - name: simplification
    states: [ 漢字, 汉字 ]

engine:
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
    # - affix_segmentor@wubi_lookup 
    # - affix_segmentor@emoji_lookup 
  translators:
    - punct_translator
    # - table_translator@fixed
    - table_translator
    - reverse_lookup_translator@reverse_lookup 
    # - reverse_lookup_translator@emoji_lookup
    # - script_translator@wubi_lookup
    # - script_translator@emoji_lookup
  filters:
    - simplifier
    - uniquifier
    # - reverse_lookup_filter@wubi_lookup
    # - reverse_lookup_filter@emoji_lookup

speller:
   # alphabet: zyxwvutsrqponmlkjihgfedcba; # 分号也是会使用的
   delimiter: " ;'"
   max_code_length: 4
   auto_select: true
   auto_select_unique_candidate: true
   # algebra:
    # - derive/^([jqxy])u$/$1v/ # ju jv都是可以的
    # - xform/^([aoe].*)$/U$1/  # 添上固定的零聲母U
    # - xform/^/O/            # 替換聲母鍵，用大寫以防與原有的字母混淆

translator:
  dictionary: guhuwubi
  enable_charset_filter: true
  enable_sentence: false
  enable_encoder: true
  encode_commit_history: true
  max_phrase_length: 4
  enable_user_dict: true
  disable_user_dict_for_patterns:
    - "^z.*$"

reverse_lookup:
  # tag: pinyin
  dictionary: luna_pinyin
  prefix: "z"
  suffix: "'"
  tips: 〔拼音〕
  closing_tips: 〔五笔〕
  preedit_format:
    - xform/([nl])v/$1ü/
    - xform/([nl])ue/$1üe/
    - xform/([jqxy])v/$1u/
    # 输入时将 nv, lv 等替换为 nü, lü
    # - xform/([nljqxy])v/$1ü/
  comment_format:
    # 让反查结果只显示最长的一个
    # 如“你”字只显示 "wqiy"，而不是 "wq wqi wqiy"
    - xform/^(\S+\s)*(\S+)$/$2/
  initial_quality: 0.2

emoji_lookup:
  # tag: emoji
  dictionary: emoji
  enable_completion: true
  prefix: "`"
  suffix: "'"
  tips: 〔emoji〕
  spelling_hints: 1
  comment_format:
    - "xform/;[a-z'`]*$//"
    - "xform/^/ /"
    - "xform/,/ (/"
    - xform/\((.*)$/\($1\)/
  initial_quality: 0.1
  
punctuator:
  import_preset: symbols


key_binder:
  import_preset: default
  bindings:
      - {accept: "Control+p", send: Up, when: composing}
      - {accept: "Control+n", send: Down, when: composing}
      - {accept: "Control+b", send: Left, when: composing}
      - {accept: "Control+f", send: Right, when: composing}
      - {accept: "Control+a", send: Home, when: composing}
      - {accept: "Control+e", send: End, when: composing}
      - {accept: "Control+d", send: Delete, when: composing}
      - {accept: "Control+k", send: "Shift+Delete", when: composing}
      - {accept: "Control+h", send: BackSpace, when: composing}
      - {accept: "Control+g", send: Escape, when: composing}
      - {accept: "Control+bracketleft", send: Escape, when: composing}
      - {accept: "Alt+v", send: Page_Up, when: composing}
      - {accept: "Control+v", send: Page_Down, when: composing}
      - {accept: ISO_Left_Tab, send: Page_Up, when: composing}
      - {accept: "Shift+Tab", send: Page_Up, when: composing}
      - {accept: Tab, send: Page_Down, when: composing}
      # - {accept: minus, send: Page_Up, when: has_menu}
      # - {accept: equal, send: Page_Down, when: has_menu}
      # - {accept: comma, send: Page_Up, when: paging}
      # - {accept: period, send: Page_Down, when: has_menu}
      - {accept: "Control+Shift+1", select: .next, when: always}
      - {accept: "Control+Shift+2", toggle: ascii_mode, when: always}
      - {accept: "Control+Shift+3", toggle: simplification, when: always}
      - {accept: "Control+Shift+4", toggle: extended_charset, when: always}
      # - {accept: "'", send: 2, when: has_menu} # 为了适应dvorak左右对称
      # - {accept: "z", send: 3, when: has_menu}
      # - {accept: "Shift+Shift_L", send: 2, when: has_menu}
      # - {accept: "Shift+Shift_R", send: 3, when: has_menu}
      # - { when: composing, accept: Return, send: Escape }
      - {accept: "[", send: Page_Up, when: has_menu}
      - {accept: "]", send: Page_Down, when: has_menu}
      - {accept: semicolon, send: 2, when: has_menu}
      - {accept: apostrophe, send: 3, when: has_menu}

recognizer:
  import_preset: default
  patterns:
    reverse_lookup: "^z[a-z]*'?$"
    punct: "^/[a-z]*$" # symbol
